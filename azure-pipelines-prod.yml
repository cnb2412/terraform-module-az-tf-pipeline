name: $(BuildDefinitionName)$(SourceBranchName)$(date:yyyyMMdd)$(rev:.r)

trigger:
- ${default_branch}

pool:
  vmImage: ubuntu-latest

variables: # terraform variables
  ServiceConnectionName: ${serviceconnection}
  bk-rg-name: ${tf_bk_rg}
  bk-str-account-name: ${tf_bk_sa}
  bk-container-name: ${tf_bk_sc}
  bk-key: 'terraform.tfstate' # key is actually name of the file, determined here
  tenant: ${tenant_id}
  iac_subscription: ${iac_subscription}
  deploy_subscription: ${deploy_subscription}
  client_id: ${client_id}

stages:
  - stage: terraform_deploy
    displayName: 'Terraform deployment'
    jobs:
      - job: deploy_tf
        steps:
          - task: AzureCLI@2
            displayName: Pre flight
            inputs:
              addSpnToEnvironment: true
              azureSubscription: ${serviceconnection}
              scriptLocation: inlineScript
              scriptType: pscore
              inlineScript: |
                Write-Host "##vso[task.setvariable variable=ARM_USE_OIDC]true"
          - task: AzureCLI@2 #we need to be loged in to AZ, so we use AzureCLI@2 instead of bash, for backend connection
            displayName: tf init
            inputs:
              azureSubscription: ${serviceconnection}
              scriptLocation: inlineScript
              scriptType: bash
              inlineScript: |
                set -eu  # fail on error
                terraform init \
                -input=false \
                -backend-config=storage_account_name=$(bk-str-account-name) \
                -backend-config=container_name=$(bk-container-name) \
                -backend-config=key=$(Build.Repository.Name).tfstate \
                -backend-config=use_oidc=true \
                -backend-config=subscription_id=$(iac_subscription) \
                -backend-config=tenant_id=$(tenant) \
                -backend-config=resource_group_name=$(bk-rg-name)
          - task: AzureCLI@2
            displayName: tf validate
            inputs:
              azureSubscription: ${serviceconnection}
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -eu  # fail on error
                terraform validate
          - task: AzureCLI@2
            displayName: tf plan
            inputs:
              azureSubscription: ${serviceconnection}
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -eu  # fail on error
                terraform plan \
                -input=false -out=tf_plan.out
          - task: AzureCLI@2
            displayName: tf apply
            inputs:
              azureSubscription: ${serviceconnection}
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -eu  # fail on error
                terraform apply -parallelism=2 -input=false -auto-approve tf_plan.out